// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?   // Hashed password for email/password auth
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Google Calendar integration
  googleRefreshToken String?
  workingHoursStart Int      @default(8)  // 24-hour format
  workingHoursEnd   Int      @default(22) // 24-hour format

  // Relationships
  sentInvites     Event[]  @relation("SentInvites")
  receivedInvites Event[]  @relation("ReceivedInvites")
  accounts        Account[]
  sessions        Session[]
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  
  // The user who initiated the event
  creatorId   String
  creator     User     @relation("SentInvites", fields: [creatorId], references: [id])
  
  // The user who was invited
  inviteeId   String
  invitee     User     @relation("ReceivedInvites", fields: [inviteeId], references: [id])
  
  // Google Calendar event IDs for both users
  creatorEventId   String?
  inviteeEventId   String?

  @@index([creatorId])
  @@index([inviteeId])
} 